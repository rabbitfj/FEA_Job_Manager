import sysfrom collections import dequefrom PyQt5 import QtCore, QtGui, QtWidgetsimport osimport sqlite3def readrow(path,tab,key):    iteration_list=[]    if os.path.exists(path):        con=sqlite3.connect(path)        with con:            cur=con.cursor()            try:                cur.execute("select * from %s" % tab)                row_datas=cur.fetchall()                if len(row_datas)==0:                    return 'Not found %s in %s' % (key,tab)                else:                    level_dict={}                    for row_data in row_datas:                        if row_data[9]==key:                            data=list(row_data)                            data[9]=str(data[9])                            row_data=tuple(data)                            #print(row_data)                            item={'level': '',                                   'sid': '',                                   'parent_ID': '',                                   'Job_name': '',                                   'des': ''}                            if row_data[1]=='None':                                level_dict[row_data[0]]=0                            else:                                level_dict[row_data[0]]=level_dict[row_data[1]]+1                            item={'level': level_dict[row_data[0]],                                   'sid': row_data[0],                                   'parent_ID': row_data[1],                                   'Job_name': row_data[6],                                   'des': row_data[12]}                            iteration_list.append(item)                            #print(item)                return iteration_list            except:                print('Given Job/Tab name is invalid')    else:        print('Given database is invalid')class Window(QtWidgets.QWidget):    def __init__(self, data):        super(Window, self).__init__()        self.tree = QtWidgets.QTreeView(self)        layout = QtWidgets.QVBoxLayout(self)        layout.addWidget(self.tree)        self.model = QtGui.QStandardItemModel()        self.model.setHorizontalHeaderLabels(['Job_name', 'Description'])        self.tree.header().setDefaultSectionSize(180)        self.tree.setModel(self.model)        self.importData(data)        self.tree.expandAll()    def importData(self, data, root=None):        self.model.setRowCount(0)        if root is None:            root = self.model.invisibleRootItem()        seen = {}        values = deque(data)        while values:            value = values.popleft()            if value['level'] == 0:                parent = root            else:                pid = value['parent_ID']                if pid not in seen:                    values.append(value)                    continue                parent = seen[pid]            dbid = value['sid']            des = value['des']            parent.appendRow([                QtGui.QStandardItem(value['Job_name']),                QtGui.QStandardItem(des),                ])            seen[dbid] = parent.child(parent.rowCount() - 1)if __name__ == '__main__':    JM_database=r'c:\Job_Manager\data\Jobs_data.db'    JM_database_tabs=['Job_list','Project_list']    JM_files_db=r'c:\Job_Manager\data\Files_data.db'    JM_files_tabs=['Case_info','Include_info']    #item_template={'level': 0, 'sid': job_number, 'parent_ID': base_on, 'Job_name': job_name, 'des': description}     #level_dict={'job_number':'level'}    machine='320D'    data=readrow(JM_database,JM_database_tabs[0],'320D')    app = QtWidgets.QApplication(sys.argv)    window = Window(data)    window.setGeometry(600, 100, 800, 600)    window.show()    sys.exit(app.exec_())